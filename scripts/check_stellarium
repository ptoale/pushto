#!/usr/bin/env python
"""
Debugging coord transforms...

"""
import logging
import time
import zmq
import numpy as np
from astropy.time import Time
from pushto.config import Configuration
from pushto.stellarium import StellariumTC, StellariumRPC
from pushto.alignment import vec_from_angles
from pushto.messages import Message, CmdMessage
from pushto.site import Location

if __name__ == '__main__':

    "Configure the logging"
    logging.basicConfig(
        level=logging.DEBUG,
        #level=logging.INFO,
        format='[%(levelname)-5s] (%(threadName)-10s) %(message)s',
    )
    
    "Use default configuration"
    cfg = Configuration()
    
    "Get the location"
    location = Location.setup(cfg)

    "Setup the address/ports"
    data_sub_address = "tcp://%s:%s" % (cfg.get_host_ip(), cfg.get_td_eq_port())
    calib_pub_address = "tcp://%s:%s" % (cfg.get_host_ip(), cfg.get_pd_eq_port())

    "Create the rpc"
    rpc = StellariumRPC()

    "Create the zmq context"
    ctx = zmq.Context()

    "Create the STC"
    stc = StellariumTC.setup(cfg, ctx)

    "Create the data publisher (won't be used, but seems necessary)"
    data_pub_socket = ctx.socket(zmq.PUB)
    data_pub_socket.bind(data_sub_address)

    "Create the calib subscriber"
    calib_sub_socket = ctx.socket(zmq.SUB)
    calib_sub_socket.subscribe("")
    calib_sub_socket.connect(calib_pub_address)
    
    "Setup a poller to check for data"
    poller = zmq.Poller()
    poller.register(calib_sub_socket, zmq.POLLIN)
    poller.register(data_pub_socket, zmq.POLLOUT)
    
    "Start the proxy"
    stc.handshake()
    stc.start()
    
    "main loop"
    print("Select a target in Stellarium, click 'Current object' and then click 'Slew'")
    try:
        while True:
            socks = dict(poller.poll())
            if calib_sub_socket in socks:
                "convert stellarium ra and dec to azi and alt"
                calib = Message.from_json(calib_sub_socket.recv_json())
                azi, alt = location.equatorial_to_horizontal(calib.ra, calib.dec, Time(calib.time, format='iso'))
                
                "get azi and alt from stellarium rpc"
                stel_altaz = rpc.get_selected_alt_az()
                
                r1 = vec_from_angles(stel_altaz[1], stel_altaz[0])
                r2 = vec_from_angles(azi, alt)
                phi = 3600*np.degrees(np.arccos(np.dot(r1, r2)))
                print(str(calib))
                print('     RPC: {:10.6f}, {:10.6f}'.format(stel_altaz[0], stel_altaz[1]))
                print(' astropy: {:10.6f}, {:10.6f}'.format(alt, azi))
                print('     phi: ' + str(phi) + ' arcsec')
            
    except KeyboardInterrupt:
        pass

    "Shut it down"
    msg = CmdMessage(cmd='stop')
    data_pub_socket.send_json(msg.to_json())
    time.sleep(1)
        
    "clean up"
    calib_sub_socket.close(linger=1)
    ctx.destroy()
    